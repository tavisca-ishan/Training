//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WCFClient.ClientReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ClientReference.ICalculator")]
    public interface ICalculator {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculator/AddNumbers", ReplyAction="http://tempuri.org/ICalculator/AddNumbersResponse")]
        double AddNumbers(double number1, double number2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculator/AddNumbers", ReplyAction="http://tempuri.org/ICalculator/AddNumbersResponse")]
        System.Threading.Tasks.Task<double> AddNumbersAsync(double number1, double number2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculator/SubstractNumbers", ReplyAction="http://tempuri.org/ICalculator/SubstractNumbersResponse")]
        double SubstractNumbers(double number1, double number2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculator/SubstractNumbers", ReplyAction="http://tempuri.org/ICalculator/SubstractNumbersResponse")]
        System.Threading.Tasks.Task<double> SubstractNumbersAsync(double number1, double number2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculator/MultiplyNumbers", ReplyAction="http://tempuri.org/ICalculator/MultiplyNumbersResponse")]
        double MultiplyNumbers(double number1, double number2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculator/MultiplyNumbers", ReplyAction="http://tempuri.org/ICalculator/MultiplyNumbersResponse")]
        System.Threading.Tasks.Task<double> MultiplyNumbersAsync(double number1, double number2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculator/DivideNumbers", ReplyAction="http://tempuri.org/ICalculator/DivideNumbersResponse")]
        double DivideNumbers(double number1, double number2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculator/DivideNumbers", ReplyAction="http://tempuri.org/ICalculator/DivideNumbersResponse")]
        System.Threading.Tasks.Task<double> DivideNumbersAsync(double number1, double number2);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICalculatorChannel : WCFClient.ClientReference.ICalculator, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CalculatorClient : System.ServiceModel.ClientBase<WCFClient.ClientReference.ICalculator>, WCFClient.ClientReference.ICalculator {
        
        public CalculatorClient() {
        }
        
        public CalculatorClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CalculatorClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CalculatorClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CalculatorClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public double AddNumbers(double number1, double number2) {
            return base.Channel.AddNumbers(number1, number2);
        }
        
        public System.Threading.Tasks.Task<double> AddNumbersAsync(double number1, double number2) {
            return base.Channel.AddNumbersAsync(number1, number2);
        }
        
        public double SubstractNumbers(double number1, double number2) {
            return base.Channel.SubstractNumbers(number1, number2);
        }
        
        public System.Threading.Tasks.Task<double> SubstractNumbersAsync(double number1, double number2) {
            return base.Channel.SubstractNumbersAsync(number1, number2);
        }
        
        public double MultiplyNumbers(double number1, double number2) {
            return base.Channel.MultiplyNumbers(number1, number2);
        }
        
        public System.Threading.Tasks.Task<double> MultiplyNumbersAsync(double number1, double number2) {
            return base.Channel.MultiplyNumbersAsync(number1, number2);
        }
        
        public double DivideNumbers(double number1, double number2) {
            return base.Channel.DivideNumbers(number1, number2);
        }
        
        public System.Threading.Tasks.Task<double> DivideNumbersAsync(double number1, double number2) {
            return base.Channel.DivideNumbersAsync(number1, number2);
        }
    }
}
